// Code generated by sqlc. DO NOT EDIT.
// source: postgres-query.sql

package pg

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/lib/pq"
)

const countriesWithAddress = `-- name: CountriesWithAddress :many
SELECT c.id AS country_id,
       c.name,
       c.code,
       a.id AS address_id,
       a.line_1,
       a.line_2,
       a.postcode,
       a.city,
       a.state
FROM countries c
         LEFT JOIN addresses a on c.id = a.country_id
ORDER BY c.id
`

type CountriesWithAddressRow struct {
	CountryID int64
	Name      string
	Code      string
	AddressID sql.NullInt64
	Line1     sql.NullString
	Line2     sql.NullString
	Postcode  sql.NullInt32
	City      sql.NullString
	State     sql.NullString
}

func (q *Queries) CountriesWithAddress(ctx context.Context) ([]CountriesWithAddressRow, error) {
	rows, err := q.db.QueryContext(ctx, countriesWithAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountriesWithAddressRow
	for rows.Next() {
		var i CountriesWithAddressRow
		if err := rows.Scan(
			&i.CountryID,
			&i.Name,
			&i.Code,
			&i.AddressID,
			&i.Line1,
			&i.Line2,
			&i.Postcode,
			&i.City,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countriesWithAddressAggregate = `-- name: CountriesWithAddressAggregate :many
select row_to_json(row) from (select id, code, name, address from country_address) row
`

func (q *Queries) CountriesWithAddressAggregate(ctx context.Context) ([]json.RawMessage, error) {
	rows, err := q.db.QueryContext(ctx, countriesWithAddressAggregate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []json.RawMessage
	for rows.Next() {
		var row_to_json json.RawMessage
		if err := rows.Scan(&row_to_json); err != nil {
			return nil, err
		}
		items = append(items, row_to_json)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUser = `-- name: CreateUser :one

INSERT INTO users (first_name, middle_name, last_name, email, password, favourite_colour)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, first_name, middle_name, last_name, email, password, favourite_colour, updated_at
`

type CreateUserParams struct {
	FirstName       string
	MiddleName      sql.NullString
	LastName        string
	Email           string
	Password        string
	FavouriteColour ValidColours
}

// SELECT *
// FROM users
// WHERE (@first_name::text = ” OR first_name = @first_name)
//
//	AND (@email::text = '' OR email ILIKE '%' || @email || '%')
//
// --   AND (@favourite_colour::text = ” OR favourite_colour ILIKE '%' || @favourite_colour || '%')
// LIMIT 30
// OFFSET 0;
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.FavouriteColour,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.FavouriteColour,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, middle_name, last_name, email, favourite_colour, updated_at
FROM users
WHERE id = $1
`

type GetUserRow struct {
	ID              int64
	FirstName       string
	MiddleName      sql.NullString
	LastName        string
	Email           string
	FavouriteColour ValidColours
	UpdatedAt       time.Time
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Email,
		&i.FavouriteColour,
		&i.UpdatedAt,
	)
	return i, err
}

const listDynamicUsers = `-- name: ListDynamicUsers :many
SELECT id, first_name, middle_name, last_name, email, password, favourite_colour, updated_at
FROM users
WHERE ($1::text = '' OR first_name ILIKE '%' || $1 || '%')
  AND ($2::text = '' OR email = LOWER($2) )
ORDER BY (CASE
              WHEN $3::text = 'first_name' THEN first_name
              WHEN $4::text = 'email' THEN email
    END) DESC,
         (CASE
              WHEN $5::text = 'first_name' THEN first_name
              WHEN $6::text = 'email' THEN email
             END)

OFFSET $7 LIMIT $8
`

type ListDynamicUsersParams struct {
	FirstName     string
	Email         string
	FirstNameDesc string
	EmailDesc     string
	FirstNameAsc  string
	EmailAsc      string
	SqlOffset     int32
	SqlLimit      int32
}

// AND (@favourite_colour IS NOT NULL OR favourite_colour = @favourite_colour )
// AND (@favourite_colour_present::text = ” OR favourite_colour = @favourite_colour )
// AND (@favourite_colour_present::valid_colours = ” OR favourite_colour = @favourite_colour )
//
//	WHEN @favourite_colour_desc::text = 'favourite_colour' THEN favourite_colour
//	WHEN @favourite_colour_asc::text = 'favourite_colour' THEN favourite_colour
func (q *Queries) ListDynamicUsers(ctx context.Context, arg ListDynamicUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listDynamicUsers,
		arg.FirstName,
		arg.Email,
		arg.FirstNameDesc,
		arg.EmailDesc,
		arg.FirstNameAsc,
		arg.EmailAsc,
		arg.SqlOffset,
		arg.SqlLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.FavouriteColour,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listM2MOneQuery = `-- name: ListM2MOneQuery :many
SELECT u.id,
       u.first_name,
       u.middle_name,
       u.last_name,
       u.email,
       u.favourite_colour,
       array_to_json(array_agg(row_to_json(a.*))) AS addresses
FROM addresses a
         INNER JOIN user_addresses ua ON ua.address_id = a.id
         INNER JOIN users u on u.id = ua.user_id
GROUP BY u.id
`

type ListM2MOneQueryRow struct {
	ID              int64
	FirstName       string
	MiddleName      sql.NullString
	LastName        string
	Email           string
	FavouriteColour ValidColours
	Addresses       json.RawMessage
}

func (q *Queries) ListM2MOneQuery(ctx context.Context) ([]ListM2MOneQueryRow, error) {
	rows, err := q.db.QueryContext(ctx, listM2MOneQuery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListM2MOneQueryRow
	for rows.Next() {
		var i ListM2MOneQueryRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Email,
			&i.FavouriteColour,
			&i.Addresses,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, middle_name, last_name, email, favourite_colour, updated_at
FROM users
ORDER BY id
LIMIT 30
OFFSET 0
`

type ListUsersRow struct {
	ID              int64
	FirstName       string
	MiddleName      sql.NullString
	LastName        string
	Email           string
	FavouriteColour ValidColours
	UpdatedAt       time.Time
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Email,
			&i.FavouriteColour,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectAddress = `-- name: SelectAddress :many
SELECT a.id, a.line_1, a.line_2, a.postcode, a.city, a.state, a.country_id
FROM addresses a
WHERE a.id = ANY($1::int[])
`

func (q *Queries) SelectAddress(ctx context.Context, dollar_1 []int32) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, selectAddress, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.Line1,
			&i.Line2,
			&i.Postcode,
			&i.City,
			&i.State,
			&i.CountryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserAddresses = `-- name: SelectUserAddresses :many
SELECT DISTINCT ua.user_id, ua.address_id
FROM "addresses" a
         LEFT JOIN "user_addresses" ua ON a.id = ua.address_id
WHERE ua.user_id = ANY($1::int[])
`

type SelectUserAddressesRow struct {
	UserID    sql.NullInt64
	AddressID sql.NullInt64
}

func (q *Queries) SelectUserAddresses(ctx context.Context, dollar_1 []int32) ([]SelectUserAddressesRow, error) {
	rows, err := q.db.QueryContext(ctx, selectUserAddresses, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUserAddressesRow
	for rows.Next() {
		var i SelectUserAddressesRow
		if err := rows.Scan(&i.UserID, &i.AddressID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUsers = `-- name: SelectUsers :many
SELECT u.id, u.first_name, u.middle_name, u.last_name, u.email, u.favourite_colour, updated_at
FROM "users" u
LIMIT 30
`

type SelectUsersRow struct {
	ID              int64
	FirstName       string
	MiddleName      sql.NullString
	LastName        string
	Email           string
	FavouriteColour ValidColours
	UpdatedAt       time.Time
}

func (q *Queries) SelectUsers(ctx context.Context) ([]SelectUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, selectUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUsersRow
	for rows.Next() {
		var i SelectUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Email,
			&i.FavouriteColour,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectWhereInLastNames = `-- name: SelectWhereInLastNames :many
SELECT id, first_name, middle_name, last_name, email, password, favourite_colour, updated_at FROM users WHERE last_name = ANY($1::text[])
`

func (q *Queries) SelectWhereInLastNames(ctx context.Context, lastName []string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, selectWhereInLastNames, pq.Array(lastName))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.FavouriteColour,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET first_name=$1,
    middle_name=$2,
    last_name=$3,
    email=$4,
    favourite_colour=$5
WHERE id = $6
`

type UpdateUserParams struct {
	FirstName       string
	MiddleName      sql.NullString
	LastName        string
	Email           string
	FavouriteColour ValidColours
	ID              int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Email,
		arg.FavouriteColour,
		arg.ID,
	)
	return err
}
