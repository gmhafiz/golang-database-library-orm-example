// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
)

const countriesWithAddress = `-- name: CountriesWithAddress :many
SELECT c.id AS country_id,
       c.name,
       c.code,
       a.id AS address_id,
       a.line_1,
       a.line_2,
       a.postcode,
       a.city,
       a.state
FROM countries c
         LEFT JOIN addresses a on c.id = a.country_id
ORDER BY c.id
`

type CountriesWithAddressRow struct {
	CountryID int64
	Name      string
	Code      string
	AddressID sql.NullInt64
	Line1     sql.NullString
	Line2     sql.NullString
	Postcode  sql.NullInt32
	City      sql.NullString
	State     sql.NullString
}

func (q *Queries) CountriesWithAddress(ctx context.Context) ([]CountriesWithAddressRow, error) {
	rows, err := q.db.QueryContext(ctx, countriesWithAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountriesWithAddressRow
	for rows.Next() {
		var i CountriesWithAddressRow
		if err := rows.Scan(
			&i.CountryID,
			&i.Name,
			&i.Code,
			&i.AddressID,
			&i.Line1,
			&i.Line2,
			&i.Postcode,
			&i.City,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countriesWithAddressAggregate = `-- name: CountriesWithAddressAggregate :many
select row_to_json(row) from (select id, code, name, addresses from country_address) row
`

func (q *Queries) CountriesWithAddressAggregate(ctx context.Context) ([]json.RawMessage, error) {
	rows, err := q.db.QueryContext(ctx, countriesWithAddressAggregate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []json.RawMessage
	for rows.Next() {
		var row_to_json json.RawMessage
		if err := rows.Scan(&row_to_json); err != nil {
			return nil, err
		}
		items = append(items, row_to_json)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (first_name, middle_name, last_name, email, password)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, first_name, middle_name, last_name, email, password
`

type CreateUserParams struct {
	FirstName  string
	MiddleName sql.NullString
	LastName   string
	Email      string
	Password   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, middle_name, last_name, email, password
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, middle_name, last_name, email, password
FROM users
ORDER BY last_name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET first_name=$1,
    middle_name=$2,
    last_name=$3,
    email=$4
WHERE id = $5
`

type UpdateUserParams struct {
	FirstName  string
	MiddleName sql.NullString
	LastName   string
	Email      string
	ID         int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Email,
		arg.ID,
	)
	return err
}
