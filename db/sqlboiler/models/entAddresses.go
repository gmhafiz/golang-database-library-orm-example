// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EntAddress is an object representing the database table.
type EntAddress struct {
	ID                  int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Line1               string      `boil:"line_1" json:"line_1" toml:"line_1" yaml:"line_1"`
	Line2               null.String `boil:"line_2" json:"line_2,omitempty" toml:"line_2" yaml:"line_2,omitempty"`
	Postcode            int64       `boil:"postcode" json:"postcode" toml:"postcode" yaml:"postcode"`
	State               string      `boil:"state" json:"state" toml:"state" yaml:"state"`
	CountryEntAddresses null.Int64  `boil:"country_ent_addresses" json:"country_ent_addresses,omitempty" toml:"country_ent_addresses" yaml:"country_ent_addresses,omitempty"`

	R *entAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L entAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EntAddressColumns = struct {
	ID                  string
	Line1               string
	Line2               string
	Postcode            string
	State               string
	CountryEntAddresses string
}{
	ID:                  "id",
	Line1:               "line_1",
	Line2:               "line_2",
	Postcode:            "postcode",
	State:               "state",
	CountryEntAddresses: "country_ent_addresses",
}

var EntAddressTableColumns = struct {
	ID                  string
	Line1               string
	Line2               string
	Postcode            string
	State               string
	CountryEntAddresses string
}{
	ID:                  "entAddresses.id",
	Line1:               "entAddresses.line_1",
	Line2:               "entAddresses.line_2",
	Postcode:            "entAddresses.postcode",
	State:               "entAddresses.state",
	CountryEntAddresses: "entAddresses.country_ent_addresses",
}

// Generated where

var EntAddressWhere = struct {
	ID                  whereHelperint64
	Line1               whereHelperstring
	Line2               whereHelpernull_String
	Postcode            whereHelperint64
	State               whereHelperstring
	CountryEntAddresses whereHelpernull_Int64
}{
	ID:                  whereHelperint64{field: "\"entAddresses\".\"id\""},
	Line1:               whereHelperstring{field: "\"entAddresses\".\"line_1\""},
	Line2:               whereHelpernull_String{field: "\"entAddresses\".\"line_2\""},
	Postcode:            whereHelperint64{field: "\"entAddresses\".\"postcode\""},
	State:               whereHelperstring{field: "\"entAddresses\".\"state\""},
	CountryEntAddresses: whereHelpernull_Int64{field: "\"entAddresses\".\"country_ent_addresses\""},
}

// EntAddressRels is where relationship names are stored.
var EntAddressRels = struct {
	CountryEntAddress string
	UserEntUsers      string
}{
	CountryEntAddress: "CountryEntAddress",
	UserEntUsers:      "UserEntUsers",
}

// entAddressR is where relationships are stored.
type entAddressR struct {
	CountryEntAddress *EntCountry  `boil:"CountryEntAddress" json:"CountryEntAddress" toml:"CountryEntAddress" yaml:"CountryEntAddress"`
	UserEntUsers      EntUserSlice `boil:"UserEntUsers" json:"UserEntUsers" toml:"UserEntUsers" yaml:"UserEntUsers"`
}

// NewStruct creates a new relationship struct
func (*entAddressR) NewStruct() *entAddressR {
	return &entAddressR{}
}

// entAddressL is where Load methods for each relationship are stored.
type entAddressL struct{}

var (
	entAddressAllColumns            = []string{"id", "line_1", "line_2", "postcode", "state", "country_ent_addresses"}
	entAddressColumnsWithoutDefault = []string{"line_1", "line_2", "postcode", "state", "country_ent_addresses"}
	entAddressColumnsWithDefault    = []string{"id"}
	entAddressPrimaryKeyColumns     = []string{"id"}
)

type (
	// EntAddressSlice is an alias for a slice of pointers to EntAddress.
	// This should almost always be used instead of []EntAddress.
	EntAddressSlice []*EntAddress
	// EntAddressHook is the signature for custom EntAddress hook methods
	EntAddressHook func(context.Context, boil.ContextExecutor, *EntAddress) error

	entAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	entAddressType                 = reflect.TypeOf(&EntAddress{})
	entAddressMapping              = queries.MakeStructMapping(entAddressType)
	entAddressPrimaryKeyMapping, _ = queries.BindMapping(entAddressType, entAddressMapping, entAddressPrimaryKeyColumns)
	entAddressInsertCacheMut       sync.RWMutex
	entAddressInsertCache          = make(map[string]insertCache)
	entAddressUpdateCacheMut       sync.RWMutex
	entAddressUpdateCache          = make(map[string]updateCache)
	entAddressUpsertCacheMut       sync.RWMutex
	entAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var entAddressBeforeInsertHooks []EntAddressHook
var entAddressBeforeUpdateHooks []EntAddressHook
var entAddressBeforeDeleteHooks []EntAddressHook
var entAddressBeforeUpsertHooks []EntAddressHook

var entAddressAfterInsertHooks []EntAddressHook
var entAddressAfterSelectHooks []EntAddressHook
var entAddressAfterUpdateHooks []EntAddressHook
var entAddressAfterDeleteHooks []EntAddressHook
var entAddressAfterUpsertHooks []EntAddressHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EntAddress) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entAddressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EntAddress) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entAddressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EntAddress) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entAddressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EntAddress) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entAddressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EntAddress) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entAddressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EntAddress) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entAddressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EntAddress) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entAddressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EntAddress) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entAddressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EntAddress) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entAddressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEntAddressHook registers your hook function for all future operations.
func AddEntAddressHook(hookPoint boil.HookPoint, entAddressHook EntAddressHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		entAddressBeforeInsertHooks = append(entAddressBeforeInsertHooks, entAddressHook)
	case boil.BeforeUpdateHook:
		entAddressBeforeUpdateHooks = append(entAddressBeforeUpdateHooks, entAddressHook)
	case boil.BeforeDeleteHook:
		entAddressBeforeDeleteHooks = append(entAddressBeforeDeleteHooks, entAddressHook)
	case boil.BeforeUpsertHook:
		entAddressBeforeUpsertHooks = append(entAddressBeforeUpsertHooks, entAddressHook)
	case boil.AfterInsertHook:
		entAddressAfterInsertHooks = append(entAddressAfterInsertHooks, entAddressHook)
	case boil.AfterSelectHook:
		entAddressAfterSelectHooks = append(entAddressAfterSelectHooks, entAddressHook)
	case boil.AfterUpdateHook:
		entAddressAfterUpdateHooks = append(entAddressAfterUpdateHooks, entAddressHook)
	case boil.AfterDeleteHook:
		entAddressAfterDeleteHooks = append(entAddressAfterDeleteHooks, entAddressHook)
	case boil.AfterUpsertHook:
		entAddressAfterUpsertHooks = append(entAddressAfterUpsertHooks, entAddressHook)
	}
}

// One returns a single entAddress record from the query.
func (q entAddressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EntAddress, error) {
	o := &EntAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for entAddresses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EntAddress records from the query.
func (q entAddressQuery) All(ctx context.Context, exec boil.ContextExecutor) (EntAddressSlice, error) {
	var o []*EntAddress

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EntAddress slice")
	}

	if len(entAddressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EntAddress records in the query.
func (q entAddressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count entAddresses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q entAddressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if entAddresses exists")
	}

	return count > 0, nil
}

// CountryEntAddress pointed to by the foreign key.
func (o *EntAddress) CountryEntAddress(mods ...qm.QueryMod) entCountryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CountryEntAddresses),
	}

	queryMods = append(queryMods, mods...)

	query := EntCountries(queryMods...)
	queries.SetFrom(query.Query, "\"entCountries\"")

	return query
}

// UserEntUsers retrieves all the entUser's EntUsers with an executor via id column.
func (o *EntAddress) UserEntUsers(mods ...qm.QueryMod) entUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"address_entUsers\" on \"entUsers\".\"id\" = \"address_entUsers\".\"user_id\""),
		qm.Where("\"address_entUsers\".\"address_id\"=?", o.ID),
	)

	query := EntUsers(queryMods...)
	queries.SetFrom(query.Query, "\"entUsers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"entUsers\".*"})
	}

	return query
}

// LoadCountryEntAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (entAddressL) LoadCountryEntAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEntAddress interface{}, mods queries.Applicator) error {
	var slice []*EntAddress
	var object *EntAddress

	if singular {
		object = maybeEntAddress.(*EntAddress)
	} else {
		slice = *maybeEntAddress.(*[]*EntAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &entAddressR{}
		}
		if !queries.IsNil(object.CountryEntAddresses) {
			args = append(args, object.CountryEntAddresses)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &entAddressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CountryEntAddresses) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CountryEntAddresses) {
				args = append(args, obj.CountryEntAddresses)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`entCountries`),
		qm.WhereIn(`entCountries.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load EntCountry")
	}

	var resultSlice []*EntCountry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice EntCountry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for entCountries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for entCountries")
	}

	if len(entAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryEntAddress = foreign
		if foreign.R == nil {
			foreign.R = &entCountryR{}
		}
		foreign.R.CountryEntAddressEntAddresses = append(foreign.R.CountryEntAddressEntAddresses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CountryEntAddresses, foreign.ID) {
				local.R.CountryEntAddress = foreign
				if foreign.R == nil {
					foreign.R = &entCountryR{}
				}
				foreign.R.CountryEntAddressEntAddresses = append(foreign.R.CountryEntAddressEntAddresses, local)
				break
			}
		}
	}

	return nil
}

// LoadUserEntUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (entAddressL) LoadUserEntUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEntAddress interface{}, mods queries.Applicator) error {
	var slice []*EntAddress
	var object *EntAddress

	if singular {
		object = maybeEntAddress.(*EntAddress)
	} else {
		slice = *maybeEntAddress.(*[]*EntAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &entAddressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &entAddressR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"entUsers\".id, \"entUsers\".first_name, \"entUsers\".middle_name, \"entUsers\".last_name, \"entUsers\".email, \"entUsers\".password, \"a\".\"address_id\""),
		qm.From("\"entUsers\""),
		qm.InnerJoin("\"address_entUsers\" as \"a\" on \"entUsers\".\"id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"address_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load entUsers")
	}

	var resultSlice []*EntUser

	var localJoinCols []int64
	for results.Next() {
		one := new(EntUser)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.FirstName, &one.MiddleName, &one.LastName, &one.Email, &one.Password, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for entUsers")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice entUsers")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on entUsers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for entUsers")
	}

	if len(entUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserEntUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &entUserR{}
			}
			foreign.R.AddressEntAddresses = append(foreign.R.AddressEntAddresses, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.UserEntUsers = append(local.R.UserEntUsers, foreign)
				if foreign.R == nil {
					foreign.R = &entUserR{}
				}
				foreign.R.AddressEntAddresses = append(foreign.R.AddressEntAddresses, local)
				break
			}
		}
	}

	return nil
}

// SetCountryEntAddress of the entAddress to the related item.
// Sets o.R.CountryEntAddress to related.
// Adds o to related.R.CountryEntAddressEntAddresses.
func (o *EntAddress) SetCountryEntAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *EntCountry) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"entAddresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"country_ent_addresses"}),
		strmangle.WhereClause("\"", "\"", 2, entAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CountryEntAddresses, related.ID)
	if o.R == nil {
		o.R = &entAddressR{
			CountryEntAddress: related,
		}
	} else {
		o.R.CountryEntAddress = related
	}

	if related.R == nil {
		related.R = &entCountryR{
			CountryEntAddressEntAddresses: EntAddressSlice{o},
		}
	} else {
		related.R.CountryEntAddressEntAddresses = append(related.R.CountryEntAddressEntAddresses, o)
	}

	return nil
}

// RemoveCountryEntAddress relationship.
// Sets o.R.CountryEntAddress to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *EntAddress) RemoveCountryEntAddress(ctx context.Context, exec boil.ContextExecutor, related *EntCountry) error {
	var err error

	queries.SetScanner(&o.CountryEntAddresses, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("country_ent_addresses")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CountryEntAddress = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CountryEntAddressEntAddresses {
		if queries.Equal(o.CountryEntAddresses, ri.CountryEntAddresses) {
			continue
		}

		ln := len(related.R.CountryEntAddressEntAddresses)
		if ln > 1 && i < ln-1 {
			related.R.CountryEntAddressEntAddresses[i] = related.R.CountryEntAddressEntAddresses[ln-1]
		}
		related.R.CountryEntAddressEntAddresses = related.R.CountryEntAddressEntAddresses[:ln-1]
		break
	}
	return nil
}

// AddUserEntUsers adds the given related objects to the existing relationships
// of the entAddress, optionally inserting them as new records.
// Appends related to o.R.UserEntUsers.
// Sets related.R.AddressEntAddresses appropriately.
func (o *EntAddress) AddUserEntUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EntUser) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"address_entUsers\" (\"address_id\", \"user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &entAddressR{
			UserEntUsers: related,
		}
	} else {
		o.R.UserEntUsers = append(o.R.UserEntUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &entUserR{
				AddressEntAddresses: EntAddressSlice{o},
			}
		} else {
			rel.R.AddressEntAddresses = append(rel.R.AddressEntAddresses, o)
		}
	}
	return nil
}

// SetUserEntUsers removes all previously related items of the
// entAddress replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressEntAddresses's UserEntUsers accordingly.
// Replaces o.R.UserEntUsers with related.
// Sets related.R.AddressEntAddresses's UserEntUsers accordingly.
func (o *EntAddress) SetUserEntUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EntUser) error {
	query := "delete from \"address_entUsers\" where \"address_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUserEntUsersFromAddressEntAddressesSlice(o, related)
	if o.R != nil {
		o.R.UserEntUsers = nil
	}
	return o.AddUserEntUsers(ctx, exec, insert, related...)
}

// RemoveUserEntUsers relationships from objects passed in.
// Removes related items from R.UserEntUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.AddressEntAddresses.
func (o *EntAddress) RemoveUserEntUsers(ctx context.Context, exec boil.ContextExecutor, related ...*EntUser) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"address_entUsers\" where \"address_id\" = $1 and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUserEntUsersFromAddressEntAddressesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserEntUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserEntUsers)
			if ln > 1 && i < ln-1 {
				o.R.UserEntUsers[i] = o.R.UserEntUsers[ln-1]
			}
			o.R.UserEntUsers = o.R.UserEntUsers[:ln-1]
			break
		}
	}

	return nil
}

func removeUserEntUsersFromAddressEntAddressesSlice(o *EntAddress, related []*EntUser) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.AddressEntAddresses {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.AddressEntAddresses)
			if ln > 1 && i < ln-1 {
				rel.R.AddressEntAddresses[i] = rel.R.AddressEntAddresses[ln-1]
			}
			rel.R.AddressEntAddresses = rel.R.AddressEntAddresses[:ln-1]
			break
		}
	}
}

// EntAddresses retrieves all the records using an executor.
func EntAddresses(mods ...qm.QueryMod) entAddressQuery {
	mods = append(mods, qm.From("\"entAddresses\""))
	return entAddressQuery{NewQuery(mods...)}
}

// FindEntAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEntAddress(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*EntAddress, error) {
	entAddressObj := &EntAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"entAddresses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, entAddressObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from entAddresses")
	}

	if err = entAddressObj.doAfterSelectHooks(ctx, exec); err != nil {
		return entAddressObj, err
	}

	return entAddressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EntAddress) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no entAddresses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(entAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	entAddressInsertCacheMut.RLock()
	cache, cached := entAddressInsertCache[key]
	entAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			entAddressAllColumns,
			entAddressColumnsWithDefault,
			entAddressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(entAddressType, entAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(entAddressType, entAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"entAddresses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"entAddresses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into entAddresses")
	}

	if !cached {
		entAddressInsertCacheMut.Lock()
		entAddressInsertCache[key] = cache
		entAddressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EntAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EntAddress) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	entAddressUpdateCacheMut.RLock()
	cache, cached := entAddressUpdateCache[key]
	entAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			entAddressAllColumns,
			entAddressPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update entAddresses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"entAddresses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, entAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(entAddressType, entAddressMapping, append(wl, entAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update entAddresses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for entAddresses")
	}

	if !cached {
		entAddressUpdateCacheMut.Lock()
		entAddressUpdateCache[key] = cache
		entAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q entAddressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for entAddresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for entAddresses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EntAddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), entAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"entAddresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, entAddressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in entAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all entAddress")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EntAddress) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no entAddresses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(entAddressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	entAddressUpsertCacheMut.RLock()
	cache, cached := entAddressUpsertCache[key]
	entAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			entAddressAllColumns,
			entAddressColumnsWithDefault,
			entAddressColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			entAddressAllColumns,
			entAddressPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert entAddresses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(entAddressPrimaryKeyColumns))
			copy(conflict, entAddressPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"entAddresses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(entAddressType, entAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(entAddressType, entAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert entAddresses")
	}

	if !cached {
		entAddressUpsertCacheMut.Lock()
		entAddressUpsertCache[key] = cache
		entAddressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EntAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EntAddress) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EntAddress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), entAddressPrimaryKeyMapping)
	sql := "DELETE FROM \"entAddresses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from entAddresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for entAddresses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q entAddressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no entAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from entAddresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for entAddresses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EntAddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(entAddressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), entAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"entAddresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, entAddressPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from entAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for entAddresses")
	}

	if len(entAddressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EntAddress) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEntAddress(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EntAddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EntAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), entAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"entAddresses\".* FROM \"entAddresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, entAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EntAddressSlice")
	}

	*o = slice

	return nil
}

// EntAddressExists checks if the EntAddress row exists.
func EntAddressExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"entAddresses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if entAddresses exists")
	}

	return exists, nil
}
