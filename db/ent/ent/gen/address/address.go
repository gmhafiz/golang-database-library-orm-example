// Code generated by entc, DO NOT EDIT.

package address

const (
	// Label holds the string label denoting the address type in the database.
	Label = "address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLine1 holds the string denoting the line_1 field in the database.
	FieldLine1 = "line_1"
	// FieldLine2 holds the string denoting the line_2 field in the database.
	FieldLine2 = "line_2"
	// FieldPostcode holds the string denoting the postcode field in the database.
	FieldPostcode = "postcode"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// EdgeCountry holds the string denoting the country edge name in mutations.
	EdgeCountry = "country"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the address in the database.
	Table = "addresses"
	// CountryTable is the table that holds the country relation/edge.
	CountryTable = "addresses"
	// CountryInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountryInverseTable = "countries"
	// CountryColumn is the table column denoting the country relation/edge.
	CountryColumn = "country_addresses"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "address_users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
)

// Columns holds all SQL columns for address fields.
var Columns = []string{
	FieldID,
	FieldLine1,
	FieldLine2,
	FieldPostcode,
	FieldState,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "addresses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"country_addresses",
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"address_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
