// Code generated by entc, DO NOT EDIT.

package gen

import (
	"fmt"
	"godb/db/ent/ent/gen/address"
	"godb/db/ent/ent/gen/country"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Address is the model entity for the Address schema.
type Address struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// Line1 holds the value of the "line_1" field.
	Line1 string `json:"line_1,omitempty"`
	// Line2 holds the value of the "line_2" field.
	Line2 *string `json:"line_2,omitempty"`
	// Postcode holds the value of the "postcode" field.
	Postcode uint `json:"postcode,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddressQuery when eager-loading is set.
	Edges             AddressEdges `json:"edges"`
	country_addresses *uint
}

// AddressEdges holds the relations/edges for other nodes in the graph.
type AddressEdges struct {
	// Country holds the value of the country edge.
	Country *Country `json:"country,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CountryOrErr returns the Country value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressEdges) CountryOrErr() (*Country, error) {
	if e.loadedTypes[0] {
		if e.Country == nil {
			// The edge country was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: country.Label}
		}
		return e.Country, nil
	}
	return nil, &NotLoadedError{edge: "country"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Address) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case address.FieldID, address.FieldPostcode:
			values[i] = new(sql.NullInt64)
		case address.FieldLine1, address.FieldLine2, address.FieldState:
			values[i] = new(sql.NullString)
		case address.ForeignKeys[0]: // country_addresses
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Address", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Address fields.
func (a *Address) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case address.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint(value.Int64)
		case address.FieldLine1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field line_1", values[i])
			} else if value.Valid {
				a.Line1 = value.String
			}
		case address.FieldLine2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field line_2", values[i])
			} else if value.Valid {
				a.Line2 = new(string)
				*a.Line2 = value.String
			}
		case address.FieldPostcode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field postcode", values[i])
			} else if value.Valid {
				a.Postcode = uint(value.Int64)
			}
		case address.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				a.State = value.String
			}
		case address.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field country_addresses", value)
			} else if value.Valid {
				a.country_addresses = new(uint)
				*a.country_addresses = uint(value.Int64)
			}
		}
	}
	return nil
}

// QueryCountry queries the "country" edge of the Address entity.
func (a *Address) QueryCountry() *CountryQuery {
	return (&AddressClient{config: a.config}).QueryCountry(a)
}

// QueryUsers queries the "users" edge of the Address entity.
func (a *Address) QueryUsers() *UserQuery {
	return (&AddressClient{config: a.config}).QueryUsers(a)
}

// Update returns a builder for updating this Address.
// Note that you need to call Address.Unwrap() before calling this method if this Address
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Address) Update() *AddressUpdateOne {
	return (&AddressClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Address entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Address) Unwrap() *Address {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("gen: Address is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Address) String() string {
	var builder strings.Builder
	builder.WriteString("Address(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", line_1=")
	builder.WriteString(a.Line1)
	if v := a.Line2; v != nil {
		builder.WriteString(", line_2=")
		builder.WriteString(*v)
	}
	builder.WriteString(", postcode=")
	builder.WriteString(fmt.Sprintf("%v", a.Postcode))
	builder.WriteString(", state=")
	builder.WriteString(a.State)
	builder.WriteByte(')')
	return builder.String()
}

// Addresses is a parsable slice of Address.
type Addresses []*Address

func (a Addresses) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
