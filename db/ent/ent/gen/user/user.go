// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldMiddleName holds the string denoting the middle_name field in the database.
	FieldMiddleName = "middle_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldFavouriteColour holds the string denoting the favourite_colour field in the database.
	FieldFavouriteColour = "favourite_colour"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeAddresses holds the string denoting the addresses edge name in mutations.
	EdgeAddresses = "addresses"
	// Table holds the table name of the user in the database.
	Table = "users"
	// AddressesTable is the table that holds the addresses relation/edge. The primary key declared below.
	AddressesTable = "address_users"
	// AddressesInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	AddressesInverseTable = "addresses"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldFirstName,
	FieldMiddleName,
	FieldLastName,
	FieldEmail,
	FieldPassword,
	FieldFavouriteColour,
	FieldUpdatedAt,
}

var (
	// AddressesPrimaryKey and AddressesColumn2 are the table columns denoting the
	// primary key for the addresses relation (M2M).
	AddressesPrimaryKey = []string{"address_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
)

// FavouriteColour defines the type for the "favourite_colour" enum field.
type FavouriteColour string

// FavouriteColourGreen is the default value of the FavouriteColour enum.
const DefaultFavouriteColour = FavouriteColourGreen

// FavouriteColour values.
const (
	FavouriteColourRed   FavouriteColour = "red"
	FavouriteColourGreen FavouriteColour = "green"
	FavouriteColourBlue  FavouriteColour = "blue"
)

func (fc FavouriteColour) String() string {
	return string(fc)
}

// FavouriteColourValidator is a validator for the "favourite_colour" field enum values. It is called by the builders before save.
func FavouriteColourValidator(fc FavouriteColour) error {
	switch fc {
	case FavouriteColourRed, FavouriteColourGreen, FavouriteColourBlue:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for favourite_colour field: %q", fc)
	}
}
